#!/bin/bash

# 本地排程器統一管理工具
# 作者: Claude Code
# 用途: 統一管理本地定時打卡排程器的所有功能

set -euo pipefail

# 配置
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/lib"

# 顏色輸出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# 輸出函數
info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

# 顯示標題
show_header() {
    echo -e "${CYAN}"
    echo "╔══════════════════════════════════════════════════════════════════╗"
    echo "║                     本地排程器 - 管理工具                         ║"
    echo "║                                                                  ║"
    echo "║  統一管理 macOS 定時打卡排程器的所有功能                           ║"
    echo "╚══════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    echo
}

# 顯示幫助
show_help() {
    show_header
    echo "用法: $0 <命令> [選項]"
    echo
    echo "可用命令:"
    echo "  install         安裝定時打卡排程"
    echo "  uninstall       卸載定時打卡排程"
    echo "  status          查看排程狀態"
    echo "  dispatch        直接觸發workflow"
    echo "  logs [選項]     查看日誌"
    echo "  update-time     更新執行時間設定"
    echo "  help            顯示此幫助訊息"
    echo
    echo "日誌選項:"
    echo "  latest [N]      查看最新 N 行日誌 (預設 50)"
    echo "  today           查看今日日誌"
    echo "  monitor         即時監控日誌"
    echo "  overview        查看日誌概覽"
    echo "  stats           查看統計資訊"
    echo "  search <關鍵字> 搜尋日誌內容"
    echo "  cleanup [天數]  清理舊日誌 (預設保留 30 天)"
    echo
    echo "範例:"
    echo "  $0 install                     # 安裝定時打卡"
    echo "  $0 status                      # 查看狀態"
    echo "  $0 dispatch checkin            # 直接觸發簽到"
    echo "  $0 dispatch checkout production # 觸發正式簽退"
    echo "  $0 logs latest                 # 查看最新日誌"
    echo "  $0 logs search ERROR           # 搜尋錯誤訊息"
    echo "  $0 update-time                 # 更新執行時間"
    echo "  $0 dispatch checkin            # 測試簽到觸發"
}

# 執行安裝
do_install() {
    info "開始安裝本地定時打卡排程..."
    "$LIB_DIR/setup.sh" install
}

# 執行卸載
do_uninstall() {
    info "開始卸載本地定時打卡排程..."
    "$LIB_DIR/setup.sh" uninstall
}

# 查看狀態
do_status() {
    "$LIB_DIR/setup.sh" status
}



# 直接觸發 workflow
do_dispatch() {
    "$SCRIPT_DIR/bin/dispatch.sh" "$@"
}

# 更新時間設定
do_update_time() {
    "$LIB_DIR/schedule-manager.sh" "$@"
}

# 處理日誌命令
do_logs() {
    local subcommand="${1:-latest}"
    shift || true
    
    case "$subcommand" in
        "latest")
            "$LIB_DIR/log-viewer.sh" latest "$@"
            ;;
        "today")
            "$LIB_DIR/log-viewer.sh" today
            ;;
        "monitor")
            "$LIB_DIR/log-viewer.sh" monitor
            ;;
        "overview")
            "$LIB_DIR/log-viewer.sh" overview
            ;;
        "stats")
            "$LIB_DIR/log-viewer.sh" stats
            ;;
        "search")
            "$LIB_DIR/log-viewer.sh" search "$@"
            ;;
        "cleanup")
            "$LIB_DIR/log-viewer.sh" cleanup "$@"
            ;;
        *)
            error "未知的日誌命令: $subcommand"
            echo "可用命令: latest, today, monitor, overview, stats, search, cleanup"
            exit 1
            ;;
    esac
}

# 互動式安裝
interactive_install() {
    show_header
    
    warning "安裝前確認:"
    echo "1. 您的 Mac 需要保持開機狀態才能執行定時任務"
    echo "2. 需要穩定的網路連線來觸發 GitHub Actions"
    echo "3. 此工具會在您的系統中安裝 launchd 定時任務"
    echo

    read -p "您確定要繼續安裝嗎? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "安裝已取消"
        exit 0
    fi
    
    do_install
}

# 主函數
main() {
    # 檢查是否在正確目錄
    if [[ ! -d "$LIB_DIR" ]]; then
        error "找不到 lib 目錄，請確保在正確的目錄中執行此腳本"
        exit 1
    fi
    
    local command="${1:-help}"
    shift || true
    
    case "$command" in
        "install")
            if [[ $# -eq 0 ]]; then
                interactive_install
            else
                do_install
            fi
            ;;
        "uninstall")
            do_uninstall
            ;;
        "status")
            do_status
            ;;
        "logs")
            do_logs "$@"
            ;;
        "update-time")
            do_update_time "$@"
            ;;
        "dispatch")
            if [[ $# -eq 0 ]]; then
                error "dispatch 命令需要參數"
                echo "用法: $0 dispatch <action_type> [workflow] [log_level]"
                echo "範例: $0 dispatch checkin"
                echo "查看幫助: $0 dispatch help"
                exit 1
            fi
            do_dispatch "$@"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            error "未知命令: $command"
            echo "執行 '$0 help' 查看可用命令"
            exit 1
            ;;
    esac
}

# 執行主函數
main "$@"